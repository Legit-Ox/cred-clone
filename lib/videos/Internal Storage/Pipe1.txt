#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <string.h>

int main() {
   int pipefd[2];
   pid_t pid;
   char buf[100];

   // Create a pipe
   if (pipe(pipefd) == -1) {
       perror("pipe");
       return 1;
   }
   // Using the fork statement create a child process
   pid = fork();
   if (pid == -1) {
       perror("fork");
       return 1;
   }
   // if the pid is zero the child process is succesfully created
   if (pid == 0) {
        printf("Child process created with PID: %d and PPID: %d\n", getpid(), getppid());
        close(pipefd[1]);
       // Child process
       close(pipefd[1]); 
       printf("Enter a message:\n");
       read(pipefd[0], buf, sizeof(buf));
       printf("Child received:%s\n", buf);
   } else {
       // we are in the parent process for the further  process of input 
       // Parent  Processes
       close(pipefd[0]);
       fgets(buf, sizeof(buf), stdin);
       write(pipefd[1], buf, strlen(buf) + 1);
   }

   return 0;
}