#include <stdio.h>

void findWaitingTime(int processes[], int n, int bt[], int wt[]) {
  wt[0] = 0;
  for (int i = 1; i < n; i++)
      wt[i] = bt[i - 1] + wt[i - 1];
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
  for (int i = 0; i < n; i++)
      tat[i] = bt[i] + wt[i];
}

void findAverageTime(int processes[], int n, int bt[]) {
  int wt[n], tat[n], total_wt = 0, total_tat = 0;
  findWaitingTime(processes, n, bt, wt);
  findTurnAroundTime(processes, n, bt, wt, tat);
  printf("Processes Burst time Waiting time Turn around time\n");
  for (int i = 0; i < n; i++) {
      total_wt = total_wt + wt[i];
      total_tat = total_tat + tat[i];
      printf(" %d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
  }
  printf("Average waiting time = %.2f\n", (float)total_wt / (float)n);
  printf("Average turn around time = %.2f\n", (float)total_tat / (float)n);
}

int main() {
  int processes[] = {1, 2, 3, 4};
  int n = sizeof processes / sizeof processes[0];
  int burst_time[] = {21, 3, 6, 2};
  int arrival_time[] = {0, 1, 2, 3};

  // Sort processes by arrival time
  for (int i = 0; i < n; i++) {
      for (int j = 0; j < n-i-1; j++) {
          if (arrival_time[j] > arrival_time[j+1]) {
              // Swap burst_time[j] and burst_time[j+1]
              int temp = burst_time[j];
              burst_time[j] = burst_time[j+1];
              burst_time[j+1] = temp;

              // Swap arrival_time[j] and arrival_time[j+1]
              temp = arrival_time[j];
              arrival_time[j] = arrival_time[j+1];
              arrival_time[j+1] = temp;
          }
      }
  }

  findAverageTime(processes, n, burst_time);
  return 0;
}


